#! /usr/bin/env python3

import argparse
import requests
import hvac
import os
import urllib3


def init_arguments():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='subcommands')

    parser_create = subparsers.add_parser(
        'new',
        help='create a client|user|agent'
    )
    parser_create.add_argument(
        'type',
        help='client|agent|user',
    )
    parser_create.add_argument(
        'name',
        nargs='?',
        help='name of the client|user to create',
    )
    parser_create.add_argument(
        '--client',
        help='client in which create the user|agent',
    )
    parser_create.set_defaults(func=create)

    parser.add_argument(
        '--skip-tls-verify',
        help='ignore TLS errors',
        action='store_true'
    )
    parser.add_argument(
        '--root-path',
        help='root vault mount point',
        default='banana',
    )

    return parser.parse_args()


def get_vault_client(args):
    verify = False if args.skip_tls_verify else True
    vault = hvac.Client(
        url=os.getenv('VAULT_ADDR'),
        token=os.getenv('VAULT_TOKEN'),
        verify=verify,
    )
    return vault


def create_cert(cn, pki, role):
    vault = get_vault_client(args)
    res = vault.secrets.pki.generate_certificate(
        name=role,
        common_name=cn,
        mount_point=pki,
    )
    cert = res.json()['data']['certificate']
    key = res.json()['data']['private_key']
    return cert, key


def generate_agent_install_policy(args):
    return '''
        path "{}/{}-agents/issue/default" {{
            capabilities = ["create", "update"]
        }}
    '''.format(args.root_path, args.name)


def generate_agent_access_policy(args):
    return '''
        path "{}/{}-secrets/*" {{
            capabilities = ["read"]
        }}
    '''.format(args.root_path, args.name)


def create_intermediate_ca(args, root_path, int_path, type):
    vault = get_vault_client(args)
    vault.sys.enable_secrets_engine('pki', path=int_path, config={
        'max_lease_ttl': '43800h',
    })
    users_int = vault.secrets.pki.generate_intermediate(
        type='internal',
        common_name='{} {} Intermediate CA'.format(args.name, type),
        mount_point=int_path,
        extra_params={
            'ttl': '43800h',
        },
    )
    signed_users_int = vault.secrets.pki.sign_intermediate(
        csr=users_int.json()['data']['csr'],
        common_name='{} {} Intermediate CA'.format(args.name, type),
        mount_point=root_path,
        extra_params={
            'ttl': '43800h',
        },
    )
    int_cert = signed_users_int.json()['data']['certificate']
    vault.secrets.pki.set_signed_intermediate(
        int_cert,
        mount_point=int_path,
    )
    vault.secrets.pki.create_or_update_role('default', {
        'allow_any_name': 'true',
        'organization': args.name,
        'ou': type,
        'default_lease_ttl': '17520h',
    }, mount_point=int_path)
    return int_cert


def create_client(args):
    vault = get_vault_client(args)
    client_pki = '{}/{}'.format(args.root_path, args.name)
    client_kv = '{}/{}-secrets'.format(args.root_path, args.name)
    client_users_pki = '{}/{}-users'.format(args.root_path, args.name)
    client_agents_pki = '{}/{}-agents'.format(args.root_path, args.name)
    vault.sys.enable_secrets_engine('kv', path=client_kv)

    vault.sys.enable_secrets_engine('pki', path=client_pki, config={
        'max_lease_ttl': '43800h',
    })
    vault.secrets.pki.generate_root(
        type='internal',
        common_name=args.name,
        mount_point=client_pki,
        extra_params={
            'ttl': '43800h',
        },
    )

    create_intermediate_ca(args, client_pki, client_users_pki, 'User')
    agents_cert = create_intermediate_ca(
        args, client_pki, client_agents_pki, 'Agent'
    )

    vault.sys.create_or_update_policy(
        name='{}-agent-creation'.format(args.name),
        policy=generate_agent_install_policy(args),
    )
    vault.sys.create_or_update_policy(
        name='{}-agent-access'.format(args.name),
        policy=generate_agent_access_policy(args),
    )
    res = requests.post(
        '{}/v1/auth/cert/certs/{}'.format(
            os.getenv('VAULT_ADDR'),
            args.name,
        ),
        json={
            'display_name': args.name,
            'policies': '{}-agent-access'.format(args.name),
            'certificate': agents_cert,
        },
        headers={
            'X-Vault-Token': os.getenv('VAULT_TOKEN'),
        },
        verify=not args.skip_tls_verify,
    )
    if res.status_code >= 400:
        print(res.json())
        print('did you enable cert auth method in vault?')
        print('\n$ vault auth enable cert')
        exit(1)


def create_user(args):
    client_pki = '{}/{}-users'.format(args.root_path, args.client)
    cert, key = create_cert(args.name, client_pki, 'default')
    open(args.name + '.pem', 'w').write(cert)
    open(args.name + '.key', 'w').write(key)


def create_agent(args):
    vault = get_vault_client(args)
    token = vault.create_token(
        policies=['{}-agent-creation'.format(args.client)],
        lease='1h',
    )

    print('Join your new agent(s) using:\n')
    print(
        'bananactl {} --vault-addr={} init {} {} <agent name>'
        .format(
            '--skip-tls-verify' if args.skip_tls_verify else '',
            os.getenv('VAULT_ADDR'),
            token['auth']['client_token'],
            args.client,
        )
    )


def create(args):
    if args.type == 'client':
        create_client(args)
    elif args.type in ['user', 'agent']:
        if not args.client:
            print('please specify a client using --client')
            exit(1)
        if args.type == 'user':
            create_user(args)
        else:
            create_agent(args)
    else:
        print('type must be one of agent|user|client')
        exit(1)


args = init_arguments()
if args.skip_tls_verify:
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
if not get_vault_client(args).is_authenticated():
    print('invalid authentication data')
    exit(1)
args.func(args)
