stages:
  - prepare
  - build
  - pre-release
  - test
  - release

variables:
  REPO_DIR: /builds/products/banana

select-version:
  stage: prepare
  image: enix/semantic-release:gitlab
  script:
    - set +e
    - git describe --tags $(git rev-list --tags --max-count=1) | cut -c2- > VERSION
    - "echo current version: $(cat VERSION)"
    - npx semantic-release -d --prepare | grep 'Published release' > release.txt
    - if [ $? -eq 0 ]; then cat release.txt | awk '{printf $7}' | tr -d '[:cntrl:]' > VERSION; else echo no new version will be released; fi
    - set -e
    - "echo next version: $(cat VERSION)"
  # only:
  #   - master
  except:
    - tags
  artifacts:
    paths:
      - VERSION

.build-stack: &build-stack
  stage: build
  image: docker/compose:1.25.0-rc1
  services:
    - docker:dind
  before_script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} --password-stdin

# build-stack-dev:
#   <<: *build-stack
#   script:
#     - export CI_COMMIT_TAG=dev
#     - docker-compose build --parallel
#     - docker-compose push
#   except:
#     - master
#     - tags

build-stack-prod:
  <<: *build-stack
  script:
    - export CI_COMMIT_TAG=$(cat VERSION)
    - export COMPOSE_FLAGS='-f docker-compose.yml -f config/docker-compose.build.prod.yml'
    - docker-compose ${COMPOSE_FLAGS} build --parallel
    - docker-compose ${COMPOSE_FLAGS} push
  only:
    - master
  except:
    - tags

.build-agent: &build-agent
  stage: build
  image:
    name: enix/go-dep:0.5
    entrypoint:
      - sh
      - -c
  before_script:
    - mkdir -p /go/src/enix.io/banana
    - ln -s ${REPO_DIR}/agent/src /go/src/enix.io/banana/src
    - cp ${REPO_DIR}/agent/Gopkg.* /go/src/enix.io/banana/src
    - cd /go/src/enix.io/banana/src
    - unlink services
    - unlink models
    - cp -r ${REPO_DIR}/api/src/services .
    - cp -r ${REPO_DIR}/api/src/models .
    - export VERSION=v$(cat ${REPO_DIR}/VERSION)
    - echo -e "package main\nconst version = \"$(cat ${REPO_DIR}/VERSION > /dev/null && echo ${VERSION} || echo canary build ${CI_COMMIT_SHORT_SHA})\"" > version.go
  script:
    - cd /go/src/enix.io/banana/src
    - dep ensure
    - CGO_ENABLED=0 go build -v -o ${REPO_DIR}/${BANANACTL}-${GOOS}
  artifacts:
    paths:
      - ${BANANACTL}-${GOOS}
      - config/systemd/*
      - agent/plugins/*
  except:
    - tags

build-agent-linux:
  <<: *build-agent
  variables:
    GOOS: linux

build-agent-darwin:
  <<: *build-agent
  variables:
    GOOS: darwin

build-agent-windows:
  <<: *build-agent
  variables:
    GOOS: windows

e2e-tests:
  stage: test
  image: kroniak/ssh-client
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - cp ${SSH_PRIVKEY} ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
  script:
    - scp docker-compose.yml ubuntu@${MONITOR_NODE_IP}:/root/docker-compose.yml
    - ssh ubuntu@${MONITOR_NODE_IP} < config/e2e/upgrade_stack.sh
    - scp bananactl-linux ubuntu@${TEST_NODE_IP}:~
    - ssh ubuntu@${TEST_NODE_IP} "sudo bash -s ${GL_TOKEN} ${CI_COMMIT_REF_NAME}" < config/e2e/test_agent.sh
  only:
    - master
  except:
    - tags

# test-admin:
#   stage: test
#   image: python:3.7
#   script:
#     - cd admin
#     - ./setup.py test
#     - ./setup.py install --dry-run -v
#     - ./bananadm
#   except:
#     - tags

generate-compose-file:
    stage: pre-release
    image:
      name: docker/compose:1.24.1
      entrypoint:
        - /bin/sh
        - -c
    script:
      - export CI_COMMIT_TAG=$(cat VERSION)
      - docker-compose -f config/docker-compose.deploy.prod.yml config > docker-compose.yml
    only:
      - master
    except:
      - tags
    artifacts:
      paths:
        - docker-compose.yml

semantic-release:
  stage: release
  image: enix/semantic-release:gitlab
  script:
    - npx semantic-release --ci
  only:
    - master
  except:
    - tags

release-agent:
  stage: release
  image:
    name: skandyla/fpm
    entrypoint: ['']
  before_script:
    - apt update
    - apt install -y dpkg-dev apt-utils git
    - mkdir -p ~/.ssh
    - ssh-keyscan github.com > ~/.ssh/known_hosts
    - chmod 400 ${SSH_PRIVKEY}
    - git config --global user.email "banana@enix.io"
    - git config --global user.name "Banana CI robot"
    - cp ${SSH_PRIVKEY} ~/.ssh/id_rsa
    - export VERSION=$(cat VERSION)
  script:
    - git clone git@github.com:enix/packages.git
    - fpm \
        -s dir \
        -t deb \
        -n ${AGENT_PACKAGE_NAME} \
        -v ${VERSION} \
        --after-install agent/post_install.sh \
        --deb-pre-depends zip \
        --deb-pre-depends jq \
        --deb-pre-depends duplicity \
        --deb-pre-depends python-boto \
        bananactl-linux=/usr/local/bin/bananactl \
        agent/plugins/=/etc/banana/plugins.d/ \
        config/systemd/=/etc/systemd/system/
    - cd packages
    - mv ../${AGENT_PACKAGE_NAME}_${VERSION}_amd64.deb dists/unstable/main/binary-amd64/
    - dpkg-scanpackages . /dev/null > dists/unstable/main/binary-amd64/Packages
    - apt-ftparchive release dists/unstable > dists/unstable/Release
    - git add --all
    - git commit -m "publish version ${VERSION}"
    - git push origin master
  # only:
  #   - master
  except:
    - tags

release-admin:
  stage: release
  image: python:3.7
  before_script:
    - pip3 install twine
  script:
    - cd admin
    - ./setup.py sdist bdist_wheel
    - twine upload dist/* --repository-url ${PYPI_REPOSITORY}
  only:
    - tags
